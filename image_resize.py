import argparse
import os
from PIL import Image
import sys


def resize_image(pil_image, width, height):
    return pil_image.resize((width, height), Image.ANTIALIAS)


def parse_arguments():
    parser = argparse.ArgumentParser(description='Image resizer')
    parser.add_argument('path', type=str, help='path to image')
    parser.add_argument('-s', '--scale', type=float, help='scale')
    parser.add_argument('-w', '--width', type=int, help='desired width')
    parser.add_argument('-hg', '--height', type=int, help='desired height')
    parser.add_argument('-o', '--output', type=str, help='output path')
    args = parser.parse_args()
    return args.path, args.scale, args.width, args.height, args.output


def check_if_arguments_are_ok_or_exit_with_message_otherwise(args):
    in_path_arg, scale_arg, width_arg, height_arg, output_arg = args
    if not (scale_arg or width_arg or height_arg):
        print('---Congratulations! You just used this script to get your image'
              ' exact copy back with resolution mentioned in filename, if'
              ' that is what you wanted, good job! Otherwise specify height,'
              ' width (or both), or scale when running script.')
    if not in_path_arg:
        sys.exit('---Please specify input image path')
    if not os.path.exists(in_path_arg):
        sys.exit('!!! Wrong file path, script stopped')
    if not os.path.isfile(in_path_arg):
        sys.exit('!!! Got directory instead of file, script stopped')
    if scale_arg and (width_arg or height_arg):
        sys.exit('!!! Scale can\'t be specified with width or height, script'
                 ' stopped')


def define_target_width_and_height(scale, width, height, origin_width,
                                   origin_height):
    origin_ratio = origin_width / origin_height

    # Normal workflow, when image scale is being preserved
    if bool(width) != bool(height):
        if width:
            height = int(width / origin_ratio)
        elif height:
            width = int(height * origin_ratio)

    if scale:
        # If we got here it's already known that only scale is specified,
        # otherwise checker function would already stopped the script
        width = int(origin_width * scale)
        height = int(origin_height * scale)

    # If nothing specified, we will still generate output with a warning
    # generated by checker function
    if not (scale or width or height):
        width = origin_width
        height = origin_height
    return width, height


def process_output_path(out_path, file_path, width, height, extension):
    if not out_path:
        return '{}__{}x{}.{}'.format(file_path, width, height, extension)
    else:
        return out_path

if __name__ == '__main__':
    arguments = parse_arguments()

    check_if_arguments_are_ok_or_exit_with_message_otherwise(arguments)

    (original_image_path, target_scale, arg_width, arg_height,
     output_path) = arguments

    file_name, file_extension = os.path.basename(
        original_image_path).split('.')

    original_image = Image.open(original_image_path)
    original_width, original_height = original_image.size
    original_ratio = original_width/original_height

    if arg_width and arg_height and (arg_width/arg_height != original_ratio):
        print('!!!Warning! Final image aspect ratio will vary from original'
              ' because both width and height were specified')

    target_width, target_height = define_target_width_and_height(
        target_scale, arg_width, arg_height, original_width, original_height)

    output_path = process_output_path(output_path, file_name, target_width,
                                      target_height, file_extension)

    image = resize_image(original_image, target_width, target_height)
    image.save(output_path)
    print('---Resized image saved to {}'.format(output_path))
